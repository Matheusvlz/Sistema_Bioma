import {
  webviewWindow_exports,
  webview_exports
} from "./chunk-ZASU62AK.js";
import {
  Image,
  PhysicalPosition,
  PhysicalSize,
  Position,
  dpi_exports,
  image_exports,
  transformImage,
  window_exports
} from "./chunk-TH34D25I.js";
import {
  event_exports
} from "./chunk-INXIUBVK.js";
import {
  Channel,
  Resource,
  __classPrivateFieldGet,
  __classPrivateFieldSet,
  core_exports,
  invoke
} from "./chunk-J3TJAEO5.js";
import {
  __export
} from "./chunk-DC5AMYBS.js";

// node_modules/@tauri-apps/api/app.js
var app_exports = {};
__export(app_exports, {
  BundleType: () => BundleType,
  defaultWindowIcon: () => defaultWindowIcon,
  fetchDataStoreIdentifiers: () => fetchDataStoreIdentifiers,
  getBundleType: () => getBundleType,
  getIdentifier: () => getIdentifier,
  getName: () => getName,
  getTauriVersion: () => getTauriVersion,
  getVersion: () => getVersion,
  hide: () => hide,
  removeDataStore: () => removeDataStore,
  setDockVisibility: () => setDockVisibility,
  setTheme: () => setTheme,
  show: () => show
});
var BundleType;
(function(BundleType2) {
  BundleType2["Nsis"] = "nsis";
  BundleType2["Msi"] = "msi";
  BundleType2["Deb"] = "deb";
  BundleType2["Rpm"] = "rpm";
  BundleType2["AppImage"] = "appimage";
  BundleType2["App"] = "app";
})(BundleType || (BundleType = {}));
async function getVersion() {
  return invoke("plugin:app|version");
}
async function getName() {
  return invoke("plugin:app|name");
}
async function getTauriVersion() {
  return invoke("plugin:app|tauri_version");
}
async function getIdentifier() {
  return invoke("plugin:app|identifier");
}
async function show() {
  return invoke("plugin:app|app_show");
}
async function hide() {
  return invoke("plugin:app|app_hide");
}
async function fetchDataStoreIdentifiers() {
  return invoke("plugin:app|fetch_data_store_identifiers");
}
async function removeDataStore(uuid) {
  return invoke("plugin:app|remove_data_store", { uuid });
}
async function defaultWindowIcon() {
  return invoke("plugin:app|default_window_icon").then((rid) => rid ? new Image(rid) : null);
}
async function setTheme(theme) {
  return invoke("plugin:app|set_app_theme", { theme });
}
async function setDockVisibility(visible) {
  return invoke("plugin:app|set_dock_visibility", { visible });
}
async function getBundleType() {
  return invoke("plugin:app|bundle_type");
}

// node_modules/@tauri-apps/api/menu.js
var menu_exports = {};
__export(menu_exports, {
  CheckMenuItem: () => CheckMenuItem,
  IconMenuItem: () => IconMenuItem,
  Menu: () => Menu,
  MenuItem: () => MenuItem,
  NativeIcon: () => NativeIcon,
  PredefinedMenuItem: () => PredefinedMenuItem,
  Submenu: () => Submenu,
  itemFromKind: () => itemFromKind
});

// node_modules/@tauri-apps/api/menu/base.js
var _MenuItemBase_id;
var _MenuItemBase_kind;
function injectChannel(i) {
  var _a;
  if ("items" in i) {
    i.items = (_a = i.items) === null || _a === void 0 ? void 0 : _a.map((item) => "rid" in item ? item : injectChannel(item));
  } else if ("action" in i && i.action) {
    const handler = new Channel();
    handler.onmessage = i.action;
    delete i.action;
    return { ...i, handler };
  }
  return i;
}
async function newMenu(kind, opts) {
  const handler = new Channel();
  if (opts && typeof opts === "object") {
    if ("action" in opts && opts.action) {
      handler.onmessage = opts.action;
      delete opts.action;
    }
    if ("item" in opts && opts.item && typeof opts.item === "object" && "About" in opts.item && opts.item.About && typeof opts.item.About === "object" && "icon" in opts.item.About && opts.item.About.icon) {
      opts.item.About.icon = transformImage(opts.item.About.icon);
    }
    if ("icon" in opts && opts.icon) {
      opts.icon = transformImage(opts.icon);
    }
    if ("items" in opts && opts.items) {
      let prepareItem = function(i) {
        var _a;
        if ("rid" in i) {
          return [i.rid, i.kind];
        }
        if ("item" in i && typeof i.item === "object" && ((_a = i.item.About) === null || _a === void 0 ? void 0 : _a.icon)) {
          i.item.About.icon = transformImage(i.item.About.icon);
        }
        if ("icon" in i && i.icon) {
          i.icon = transformImage(i.icon);
        }
        if ("items" in i && i.items) {
          i.items = i.items.map(prepareItem);
        }
        return injectChannel(i);
      };
      opts.items = opts.items.map(prepareItem);
    }
  }
  return invoke("plugin:menu|new", {
    kind,
    options: opts,
    handler
  });
}
var MenuItemBase = class extends Resource {
  /** The id of this item. */
  get id() {
    return __classPrivateFieldGet(this, _MenuItemBase_id, "f");
  }
  /** @ignore */
  get kind() {
    return __classPrivateFieldGet(this, _MenuItemBase_kind, "f");
  }
  /** @ignore */
  constructor(rid, id, kind) {
    super(rid);
    _MenuItemBase_id.set(this, void 0);
    _MenuItemBase_kind.set(this, void 0);
    __classPrivateFieldSet(this, _MenuItemBase_id, id, "f");
    __classPrivateFieldSet(this, _MenuItemBase_kind, kind, "f");
  }
};
_MenuItemBase_id = /* @__PURE__ */ new WeakMap(), _MenuItemBase_kind = /* @__PURE__ */ new WeakMap();

// node_modules/@tauri-apps/api/menu/menuItem.js
var MenuItem = class _MenuItem extends MenuItemBase {
  /** @ignore */
  constructor(rid, id) {
    super(rid, id, "MenuItem");
  }
  /** Create a new menu item. */
  static async new(opts) {
    return newMenu("MenuItem", opts).then(([rid, id]) => new _MenuItem(rid, id));
  }
  /** Returns the text of this menu item. */
  async text() {
    return invoke("plugin:menu|text", { rid: this.rid, kind: this.kind });
  }
  /** Sets the text for this menu item. */
  async setText(text) {
    return invoke("plugin:menu|set_text", {
      rid: this.rid,
      kind: this.kind,
      text
    });
  }
  /** Returns whether this menu item is enabled or not. */
  async isEnabled() {
    return invoke("plugin:menu|is_enabled", { rid: this.rid, kind: this.kind });
  }
  /** Sets whether this menu item is enabled or not. */
  async setEnabled(enabled) {
    return invoke("plugin:menu|set_enabled", {
      rid: this.rid,
      kind: this.kind,
      enabled
    });
  }
  /** Sets the accelerator for this menu item. */
  async setAccelerator(accelerator) {
    return invoke("plugin:menu|set_accelerator", {
      rid: this.rid,
      kind: this.kind,
      accelerator
    });
  }
};

// node_modules/@tauri-apps/api/menu/checkMenuItem.js
var CheckMenuItem = class _CheckMenuItem extends MenuItemBase {
  /** @ignore */
  constructor(rid, id) {
    super(rid, id, "Check");
  }
  /** Create a new check menu item. */
  static async new(opts) {
    return newMenu("Check", opts).then(([rid, id]) => new _CheckMenuItem(rid, id));
  }
  /** Returns the text of this check menu item. */
  async text() {
    return invoke("plugin:menu|text", { rid: this.rid, kind: this.kind });
  }
  /** Sets the text for this check menu item. */
  async setText(text) {
    return invoke("plugin:menu|set_text", {
      rid: this.rid,
      kind: this.kind,
      text
    });
  }
  /** Returns whether this check menu item is enabled or not. */
  async isEnabled() {
    return invoke("plugin:menu|is_enabled", { rid: this.rid, kind: this.kind });
  }
  /** Sets whether this check menu item is enabled or not. */
  async setEnabled(enabled) {
    return invoke("plugin:menu|set_enabled", {
      rid: this.rid,
      kind: this.kind,
      enabled
    });
  }
  /** Sets the accelerator for this check menu item. */
  async setAccelerator(accelerator) {
    return invoke("plugin:menu|set_accelerator", {
      rid: this.rid,
      kind: this.kind,
      accelerator
    });
  }
  /** Returns whether this check menu item is checked or not. */
  async isChecked() {
    return invoke("plugin:menu|is_checked", { rid: this.rid });
  }
  /** Sets whether this check menu item is checked or not. */
  async setChecked(checked) {
    return invoke("plugin:menu|set_checked", {
      rid: this.rid,
      checked
    });
  }
};

// node_modules/@tauri-apps/api/menu/iconMenuItem.js
var NativeIcon;
(function(NativeIcon2) {
  NativeIcon2["Add"] = "Add";
  NativeIcon2["Advanced"] = "Advanced";
  NativeIcon2["Bluetooth"] = "Bluetooth";
  NativeIcon2["Bookmarks"] = "Bookmarks";
  NativeIcon2["Caution"] = "Caution";
  NativeIcon2["ColorPanel"] = "ColorPanel";
  NativeIcon2["ColumnView"] = "ColumnView";
  NativeIcon2["Computer"] = "Computer";
  NativeIcon2["EnterFullScreen"] = "EnterFullScreen";
  NativeIcon2["Everyone"] = "Everyone";
  NativeIcon2["ExitFullScreen"] = "ExitFullScreen";
  NativeIcon2["FlowView"] = "FlowView";
  NativeIcon2["Folder"] = "Folder";
  NativeIcon2["FolderBurnable"] = "FolderBurnable";
  NativeIcon2["FolderSmart"] = "FolderSmart";
  NativeIcon2["FollowLinkFreestanding"] = "FollowLinkFreestanding";
  NativeIcon2["FontPanel"] = "FontPanel";
  NativeIcon2["GoLeft"] = "GoLeft";
  NativeIcon2["GoRight"] = "GoRight";
  NativeIcon2["Home"] = "Home";
  NativeIcon2["IChatTheater"] = "IChatTheater";
  NativeIcon2["IconView"] = "IconView";
  NativeIcon2["Info"] = "Info";
  NativeIcon2["InvalidDataFreestanding"] = "InvalidDataFreestanding";
  NativeIcon2["LeftFacingTriangle"] = "LeftFacingTriangle";
  NativeIcon2["ListView"] = "ListView";
  NativeIcon2["LockLocked"] = "LockLocked";
  NativeIcon2["LockUnlocked"] = "LockUnlocked";
  NativeIcon2["MenuMixedState"] = "MenuMixedState";
  NativeIcon2["MenuOnState"] = "MenuOnState";
  NativeIcon2["MobileMe"] = "MobileMe";
  NativeIcon2["MultipleDocuments"] = "MultipleDocuments";
  NativeIcon2["Network"] = "Network";
  NativeIcon2["Path"] = "Path";
  NativeIcon2["PreferencesGeneral"] = "PreferencesGeneral";
  NativeIcon2["QuickLook"] = "QuickLook";
  NativeIcon2["RefreshFreestanding"] = "RefreshFreestanding";
  NativeIcon2["Refresh"] = "Refresh";
  NativeIcon2["Remove"] = "Remove";
  NativeIcon2["RevealFreestanding"] = "RevealFreestanding";
  NativeIcon2["RightFacingTriangle"] = "RightFacingTriangle";
  NativeIcon2["Share"] = "Share";
  NativeIcon2["Slideshow"] = "Slideshow";
  NativeIcon2["SmartBadge"] = "SmartBadge";
  NativeIcon2["StatusAvailable"] = "StatusAvailable";
  NativeIcon2["StatusNone"] = "StatusNone";
  NativeIcon2["StatusPartiallyAvailable"] = "StatusPartiallyAvailable";
  NativeIcon2["StatusUnavailable"] = "StatusUnavailable";
  NativeIcon2["StopProgressFreestanding"] = "StopProgressFreestanding";
  NativeIcon2["StopProgress"] = "StopProgress";
  NativeIcon2["TrashEmpty"] = "TrashEmpty";
  NativeIcon2["TrashFull"] = "TrashFull";
  NativeIcon2["User"] = "User";
  NativeIcon2["UserAccounts"] = "UserAccounts";
  NativeIcon2["UserGroup"] = "UserGroup";
  NativeIcon2["UserGuest"] = "UserGuest";
})(NativeIcon || (NativeIcon = {}));
var IconMenuItem = class _IconMenuItem extends MenuItemBase {
  /** @ignore */
  constructor(rid, id) {
    super(rid, id, "Icon");
  }
  /** Create a new icon menu item. */
  static async new(opts) {
    return newMenu("Icon", opts).then(([rid, id]) => new _IconMenuItem(rid, id));
  }
  /** Returns the text of this icon menu item. */
  async text() {
    return invoke("plugin:menu|text", { rid: this.rid, kind: this.kind });
  }
  /** Sets the text for this icon menu item. */
  async setText(text) {
    return invoke("plugin:menu|set_text", {
      rid: this.rid,
      kind: this.kind,
      text
    });
  }
  /** Returns whether this icon menu item is enabled or not. */
  async isEnabled() {
    return invoke("plugin:menu|is_enabled", { rid: this.rid, kind: this.kind });
  }
  /** Sets whether this icon menu item is enabled or not. */
  async setEnabled(enabled) {
    return invoke("plugin:menu|set_enabled", {
      rid: this.rid,
      kind: this.kind,
      enabled
    });
  }
  /** Sets the accelerator for this icon menu item. */
  async setAccelerator(accelerator) {
    return invoke("plugin:menu|set_accelerator", {
      rid: this.rid,
      kind: this.kind,
      accelerator
    });
  }
  /** Sets an icon for this icon menu item */
  async setIcon(icon) {
    return invoke("plugin:menu|set_icon", {
      rid: this.rid,
      kind: this.kind,
      icon: transformImage(icon)
    });
  }
};

// node_modules/@tauri-apps/api/menu/predefinedMenuItem.js
var PredefinedMenuItem = class _PredefinedMenuItem extends MenuItemBase {
  /** @ignore */
  constructor(rid, id) {
    super(rid, id, "Predefined");
  }
  /** Create a new predefined menu item. */
  static async new(opts) {
    return newMenu("Predefined", opts).then(([rid, id]) => new _PredefinedMenuItem(rid, id));
  }
  /** Returns the text of this predefined menu item. */
  async text() {
    return invoke("plugin:menu|text", { rid: this.rid, kind: this.kind });
  }
  /** Sets the text for this predefined menu item. */
  async setText(text) {
    return invoke("plugin:menu|set_text", {
      rid: this.rid,
      kind: this.kind,
      text
    });
  }
};

// node_modules/@tauri-apps/api/menu/submenu.js
function itemFromKind([rid, id, kind]) {
  switch (kind) {
    case "Submenu":
      return new Submenu(rid, id);
    case "Predefined":
      return new PredefinedMenuItem(rid, id);
    case "Check":
      return new CheckMenuItem(rid, id);
    case "Icon":
      return new IconMenuItem(rid, id);
    case "MenuItem":
    default:
      return new MenuItem(rid, id);
  }
}
var Submenu = class _Submenu extends MenuItemBase {
  /** @ignore */
  constructor(rid, id) {
    super(rid, id, "Submenu");
  }
  /** Create a new submenu. */
  static async new(opts) {
    return newMenu("Submenu", opts).then(([rid, id]) => new _Submenu(rid, id));
  }
  /** Returns the text of this submenu. */
  async text() {
    return invoke("plugin:menu|text", { rid: this.rid, kind: this.kind });
  }
  /** Sets the text for this submenu. */
  async setText(text) {
    return invoke("plugin:menu|set_text", {
      rid: this.rid,
      kind: this.kind,
      text
    });
  }
  /** Returns whether this submenu is enabled or not. */
  async isEnabled() {
    return invoke("plugin:menu|is_enabled", { rid: this.rid, kind: this.kind });
  }
  /** Sets whether this submenu is enabled or not. */
  async setEnabled(enabled) {
    return invoke("plugin:menu|set_enabled", {
      rid: this.rid,
      kind: this.kind,
      enabled
    });
  }
  /**
   * Add a menu item to the end of this submenu.
   *
   * #### Platform-specific:
   *
   * - **macOS:** Only {@linkcode Submenu}s can be added to a {@linkcode Menu}.
   */
  async append(items) {
    return invoke("plugin:menu|append", {
      rid: this.rid,
      kind: this.kind,
      items: (Array.isArray(items) ? items : [items]).map((i) => "rid" in i ? [i.rid, i.kind] : i)
    });
  }
  /**
   * Add a menu item to the beginning of this submenu.
   *
   * #### Platform-specific:
   *
   * - **macOS:** Only {@linkcode Submenu}s can be added to a {@linkcode Menu}.
   */
  async prepend(items) {
    return invoke("plugin:menu|prepend", {
      rid: this.rid,
      kind: this.kind,
      items: (Array.isArray(items) ? items : [items]).map((i) => "rid" in i ? [i.rid, i.kind] : i)
    });
  }
  /**
   * Add a menu item to the specified position in this submenu.
   *
   * #### Platform-specific:
   *
   * - **macOS:** Only {@linkcode Submenu}s can be added to a {@linkcode Menu}.
   */
  async insert(items, position) {
    return invoke("plugin:menu|insert", {
      rid: this.rid,
      kind: this.kind,
      items: (Array.isArray(items) ? items : [items]).map((i) => "rid" in i ? [i.rid, i.kind] : i),
      position
    });
  }
  /** Remove a menu item from this submenu. */
  async remove(item) {
    return invoke("plugin:menu|remove", {
      rid: this.rid,
      kind: this.kind,
      item: [item.rid, item.kind]
    });
  }
  /** Remove a menu item from this submenu at the specified position. */
  async removeAt(position) {
    return invoke("plugin:menu|remove_at", {
      rid: this.rid,
      kind: this.kind,
      position
    }).then(itemFromKind);
  }
  /** Returns a list of menu items that has been added to this submenu. */
  async items() {
    return invoke("plugin:menu|items", {
      rid: this.rid,
      kind: this.kind
    }).then((i) => i.map(itemFromKind));
  }
  /** Retrieves the menu item matching the given identifier. */
  async get(id) {
    return invoke("plugin:menu|get", {
      rid: this.rid,
      kind: this.kind,
      id
    }).then((r) => r ? itemFromKind(r) : null);
  }
  /**
   * Popup this submenu as a context menu on the specified window.
   *
   * If the position, is provided, it is relative to the window's top-left corner.
   */
  async popup(at, window2) {
    var _a;
    return invoke("plugin:menu|popup", {
      rid: this.rid,
      kind: this.kind,
      window: (_a = window2 === null || window2 === void 0 ? void 0 : window2.label) !== null && _a !== void 0 ? _a : null,
      at: at instanceof Position ? at : at ? new Position(at) : null
    });
  }
  /**
   * Set this submenu as the Window menu for the application on macOS.
   *
   * This will cause macOS to automatically add window-switching items and
   * certain other items to the menu.
   *
   * #### Platform-specific:
   *
   * - **Windows / Linux**: Unsupported.
   */
  async setAsWindowsMenuForNSApp() {
    return invoke("plugin:menu|set_as_windows_menu_for_nsapp", {
      rid: this.rid
    });
  }
  /**
   * Set this submenu as the Help menu for the application on macOS.
   *
   * This will cause macOS to automatically add a search box to the menu.
   *
   * If no menu is set as the Help menu, macOS will automatically use any menu
   * which has a title matching the localized word "Help".
   *
   * #### Platform-specific:
   *
   * - **Windows / Linux**: Unsupported.
   */
  async setAsHelpMenuForNSApp() {
    return invoke("plugin:menu|set_as_help_menu_for_nsapp", {
      rid: this.rid
    });
  }
  /** Sets an icon for this submenu */
  async setIcon(icon) {
    return invoke("plugin:menu|set_icon", {
      rid: this.rid,
      kind: this.kind,
      icon: transformImage(icon)
    });
  }
};

// node_modules/@tauri-apps/api/menu/menu.js
var Menu = class _Menu extends MenuItemBase {
  /** @ignore */
  constructor(rid, id) {
    super(rid, id, "Menu");
  }
  /** Create a new menu. */
  static async new(opts) {
    return newMenu("Menu", opts).then(([rid, id]) => new _Menu(rid, id));
  }
  /** Create a default menu. */
  static async default() {
    return invoke("plugin:menu|create_default").then(([rid, id]) => new _Menu(rid, id));
  }
  /**
   * Add a menu item to the end of this menu.
   *
   * #### Platform-specific:
   *
   * - **macOS:** Only {@linkcode Submenu}s can be added to a {@linkcode Menu}.
   */
  async append(items) {
    return invoke("plugin:menu|append", {
      rid: this.rid,
      kind: this.kind,
      items: (Array.isArray(items) ? items : [items]).map((i) => "rid" in i ? [i.rid, i.kind] : i)
    });
  }
  /**
   * Add a menu item to the beginning of this menu.
   *
   * #### Platform-specific:
   *
   * - **macOS:** Only {@linkcode Submenu}s can be added to a {@linkcode Menu}.
   */
  async prepend(items) {
    return invoke("plugin:menu|prepend", {
      rid: this.rid,
      kind: this.kind,
      items: (Array.isArray(items) ? items : [items]).map((i) => "rid" in i ? [i.rid, i.kind] : i)
    });
  }
  /**
   * Add a menu item to the specified position in this menu.
   *
   * #### Platform-specific:
   *
   * - **macOS:** Only {@linkcode Submenu}s can be added to a {@linkcode Menu}.
   */
  async insert(items, position) {
    return invoke("plugin:menu|insert", {
      rid: this.rid,
      kind: this.kind,
      items: (Array.isArray(items) ? items : [items]).map((i) => "rid" in i ? [i.rid, i.kind] : i),
      position
    });
  }
  /** Remove a menu item from this menu. */
  async remove(item) {
    return invoke("plugin:menu|remove", {
      rid: this.rid,
      kind: this.kind,
      item: [item.rid, item.kind]
    });
  }
  /** Remove a menu item from this menu at the specified position. */
  async removeAt(position) {
    return invoke("plugin:menu|remove_at", {
      rid: this.rid,
      kind: this.kind,
      position
    }).then(itemFromKind);
  }
  /** Returns a list of menu items that has been added to this menu. */
  async items() {
    return invoke("plugin:menu|items", {
      rid: this.rid,
      kind: this.kind
    }).then((i) => i.map(itemFromKind));
  }
  /** Retrieves the menu item matching the given identifier. */
  async get(id) {
    return invoke("plugin:menu|get", {
      rid: this.rid,
      kind: this.kind,
      id
    }).then((r) => r ? itemFromKind(r) : null);
  }
  /**
   * Popup this menu as a context menu on the specified window.
   *
   * @param at If a position is provided, it is relative to the window's top-left corner.
   * If there isn't one provided, the menu will pop up at the current location of the mouse.
   */
  async popup(at, window2) {
    var _a;
    return invoke("plugin:menu|popup", {
      rid: this.rid,
      kind: this.kind,
      window: (_a = window2 === null || window2 === void 0 ? void 0 : window2.label) !== null && _a !== void 0 ? _a : null,
      at: at instanceof Position ? at : at ? new Position(at) : null
    });
  }
  /**
   * Sets the app-wide menu and returns the previous one.
   *
   * If a window was not created with an explicit menu or had one set explicitly,
   * this menu will be assigned to it.
   */
  async setAsAppMenu() {
    return invoke("plugin:menu|set_as_app_menu", {
      rid: this.rid
    }).then((r) => r ? new _Menu(r[0], r[1]) : null);
  }
  /**
   * Sets the window menu and returns the previous one.
   *
   * #### Platform-specific:
   *
   * - **macOS:** Unsupported. The menu on macOS is app-wide and not specific to one
   * window, if you need to set it, use {@linkcode Menu.setAsAppMenu} instead.
   */
  async setAsWindowMenu(window2) {
    var _a;
    return invoke("plugin:menu|set_as_window_menu", {
      rid: this.rid,
      window: (_a = window2 === null || window2 === void 0 ? void 0 : window2.label) !== null && _a !== void 0 ? _a : null
    }).then((r) => r ? new _Menu(r[0], r[1]) : null);
  }
};

// node_modules/@tauri-apps/api/mocks.js
var mocks_exports = {};
__export(mocks_exports, {
  clearMocks: () => clearMocks,
  mockConvertFileSrc: () => mockConvertFileSrc,
  mockIPC: () => mockIPC,
  mockWindows: () => mockWindows
});
function mockInternals() {
  var _a, _b;
  window.__TAURI_INTERNALS__ = (_a = window.__TAURI_INTERNALS__) !== null && _a !== void 0 ? _a : {};
  window.__TAURI_EVENT_PLUGIN_INTERNALS__ = (_b = window.__TAURI_EVENT_PLUGIN_INTERNALS__) !== null && _b !== void 0 ? _b : {};
}
function mockIPC(cb, options) {
  mockInternals();
  function isEventPluginInvoke(cmd) {
    return cmd.startsWith("plugin:event|");
  }
  function handleEventPlugin(cmd, args) {
    switch (cmd) {
      case "plugin:event|listen":
        return handleListen(args);
      case "plugin:event|emit":
        return handleEmit(args);
      case "plugin:event|unlisten":
        return handleRemoveListener(args);
    }
  }
  const listeners = /* @__PURE__ */ new Map();
  function handleListen(args) {
    if (!listeners.has(args.event)) {
      listeners.set(args.event, []);
    }
    listeners.get(args.event).push(args.handler);
    return args.handler;
  }
  function handleEmit(args) {
    const eventListeners = listeners.get(args.event) || [];
    for (const handler of eventListeners) {
      runCallback(handler, args);
    }
    return null;
  }
  function handleRemoveListener(args) {
    const eventListeners = listeners.get(args.event);
    if (eventListeners) {
      const index = eventListeners.indexOf(args.id);
      if (index !== -1) {
        eventListeners.splice(index, 1);
      }
    }
  }
  async function invoke2(cmd, args, _options) {
    if ((options === null || options === void 0 ? void 0 : options.shouldMockEvents) && isEventPluginInvoke(cmd)) {
      return handleEventPlugin(cmd, args);
    }
    return cb(cmd, args);
  }
  const callbacks = /* @__PURE__ */ new Map();
  function registerCallback(callback, once = false) {
    const identifier = window.crypto.getRandomValues(new Uint32Array(1))[0];
    callbacks.set(identifier, (data) => {
      if (once) {
        unregisterCallback(identifier);
      }
      return callback && callback(data);
    });
    return identifier;
  }
  function unregisterCallback(id) {
    callbacks.delete(id);
  }
  function runCallback(id, data) {
    const callback = callbacks.get(id);
    if (callback) {
      callback(data);
    } else {
      console.warn(`[TAURI] Couldn't find callback id ${id}. This might happen when the app is reloaded while Rust is running an asynchronous operation.`);
    }
  }
  function unregisterListener(event, id) {
    unregisterCallback(id);
  }
  window.__TAURI_INTERNALS__.invoke = invoke2;
  window.__TAURI_INTERNALS__.transformCallback = registerCallback;
  window.__TAURI_INTERNALS__.unregisterCallback = unregisterCallback;
  window.__TAURI_INTERNALS__.runCallback = runCallback;
  window.__TAURI_INTERNALS__.callbacks = callbacks;
  window.__TAURI_EVENT_PLUGIN_INTERNALS__.unregisterListener = unregisterListener;
}
function mockWindows(current, ..._additionalWindows) {
  mockInternals();
  window.__TAURI_INTERNALS__.metadata = {
    currentWindow: { label: current },
    currentWebview: { windowLabel: current, label: current }
  };
}
function mockConvertFileSrc(osName) {
  mockInternals();
  window.__TAURI_INTERNALS__.convertFileSrc = function(filePath, protocol = "asset") {
    const path = encodeURIComponent(filePath);
    return osName === "windows" ? `http://${protocol}.localhost/${path}` : `${protocol}://localhost/${path}`;
  };
}
function clearMocks() {
  if (typeof window.__TAURI_INTERNALS__ !== "object") {
    return;
  }
  delete window.__TAURI_INTERNALS__.invoke;
  delete window.__TAURI_INTERNALS__.transformCallback;
  delete window.__TAURI_INTERNALS__.unregisterCallback;
  delete window.__TAURI_INTERNALS__.runCallback;
  delete window.__TAURI_INTERNALS__.callbacks;
  delete window.__TAURI_INTERNALS__.convertFileSrc;
  delete window.__TAURI_INTERNALS__.metadata;
  if (typeof window.__TAURI_EVENT_PLUGIN_INTERNALS__ !== "object") {
    return;
  }
  delete window.__TAURI_EVENT_PLUGIN_INTERNALS__.unregisterListener;
}

// node_modules/@tauri-apps/api/path.js
var path_exports = {};
__export(path_exports, {
  BaseDirectory: () => BaseDirectory,
  appCacheDir: () => appCacheDir,
  appConfigDir: () => appConfigDir,
  appDataDir: () => appDataDir,
  appLocalDataDir: () => appLocalDataDir,
  appLogDir: () => appLogDir,
  audioDir: () => audioDir,
  basename: () => basename,
  cacheDir: () => cacheDir,
  configDir: () => configDir,
  dataDir: () => dataDir,
  delimiter: () => delimiter,
  desktopDir: () => desktopDir,
  dirname: () => dirname,
  documentDir: () => documentDir,
  downloadDir: () => downloadDir,
  executableDir: () => executableDir,
  extname: () => extname,
  fontDir: () => fontDir,
  homeDir: () => homeDir,
  isAbsolute: () => isAbsolute,
  join: () => join,
  localDataDir: () => localDataDir,
  normalize: () => normalize,
  pictureDir: () => pictureDir,
  publicDir: () => publicDir,
  resolve: () => resolve,
  resolveResource: () => resolveResource,
  resourceDir: () => resourceDir,
  runtimeDir: () => runtimeDir,
  sep: () => sep,
  tempDir: () => tempDir,
  templateDir: () => templateDir,
  videoDir: () => videoDir
});
var BaseDirectory;
(function(BaseDirectory2) {
  BaseDirectory2[BaseDirectory2["Audio"] = 1] = "Audio";
  BaseDirectory2[BaseDirectory2["Cache"] = 2] = "Cache";
  BaseDirectory2[BaseDirectory2["Config"] = 3] = "Config";
  BaseDirectory2[BaseDirectory2["Data"] = 4] = "Data";
  BaseDirectory2[BaseDirectory2["LocalData"] = 5] = "LocalData";
  BaseDirectory2[BaseDirectory2["Document"] = 6] = "Document";
  BaseDirectory2[BaseDirectory2["Download"] = 7] = "Download";
  BaseDirectory2[BaseDirectory2["Picture"] = 8] = "Picture";
  BaseDirectory2[BaseDirectory2["Public"] = 9] = "Public";
  BaseDirectory2[BaseDirectory2["Video"] = 10] = "Video";
  BaseDirectory2[BaseDirectory2["Resource"] = 11] = "Resource";
  BaseDirectory2[BaseDirectory2["Temp"] = 12] = "Temp";
  BaseDirectory2[BaseDirectory2["AppConfig"] = 13] = "AppConfig";
  BaseDirectory2[BaseDirectory2["AppData"] = 14] = "AppData";
  BaseDirectory2[BaseDirectory2["AppLocalData"] = 15] = "AppLocalData";
  BaseDirectory2[BaseDirectory2["AppCache"] = 16] = "AppCache";
  BaseDirectory2[BaseDirectory2["AppLog"] = 17] = "AppLog";
  BaseDirectory2[BaseDirectory2["Desktop"] = 18] = "Desktop";
  BaseDirectory2[BaseDirectory2["Executable"] = 19] = "Executable";
  BaseDirectory2[BaseDirectory2["Font"] = 20] = "Font";
  BaseDirectory2[BaseDirectory2["Home"] = 21] = "Home";
  BaseDirectory2[BaseDirectory2["Runtime"] = 22] = "Runtime";
  BaseDirectory2[BaseDirectory2["Template"] = 23] = "Template";
})(BaseDirectory || (BaseDirectory = {}));
async function appConfigDir() {
  return invoke("plugin:path|resolve_directory", {
    directory: BaseDirectory.AppConfig
  });
}
async function appDataDir() {
  return invoke("plugin:path|resolve_directory", {
    directory: BaseDirectory.AppData
  });
}
async function appLocalDataDir() {
  return invoke("plugin:path|resolve_directory", {
    directory: BaseDirectory.AppLocalData
  });
}
async function appCacheDir() {
  return invoke("plugin:path|resolve_directory", {
    directory: BaseDirectory.AppCache
  });
}
async function audioDir() {
  return invoke("plugin:path|resolve_directory", {
    directory: BaseDirectory.Audio
  });
}
async function cacheDir() {
  return invoke("plugin:path|resolve_directory", {
    directory: BaseDirectory.Cache
  });
}
async function configDir() {
  return invoke("plugin:path|resolve_directory", {
    directory: BaseDirectory.Config
  });
}
async function dataDir() {
  return invoke("plugin:path|resolve_directory", {
    directory: BaseDirectory.Data
  });
}
async function desktopDir() {
  return invoke("plugin:path|resolve_directory", {
    directory: BaseDirectory.Desktop
  });
}
async function documentDir() {
  return invoke("plugin:path|resolve_directory", {
    directory: BaseDirectory.Document
  });
}
async function downloadDir() {
  return invoke("plugin:path|resolve_directory", {
    directory: BaseDirectory.Download
  });
}
async function executableDir() {
  return invoke("plugin:path|resolve_directory", {
    directory: BaseDirectory.Executable
  });
}
async function fontDir() {
  return invoke("plugin:path|resolve_directory", {
    directory: BaseDirectory.Font
  });
}
async function homeDir() {
  return invoke("plugin:path|resolve_directory", {
    directory: BaseDirectory.Home
  });
}
async function localDataDir() {
  return invoke("plugin:path|resolve_directory", {
    directory: BaseDirectory.LocalData
  });
}
async function pictureDir() {
  return invoke("plugin:path|resolve_directory", {
    directory: BaseDirectory.Picture
  });
}
async function publicDir() {
  return invoke("plugin:path|resolve_directory", {
    directory: BaseDirectory.Public
  });
}
async function resourceDir() {
  return invoke("plugin:path|resolve_directory", {
    directory: BaseDirectory.Resource
  });
}
async function resolveResource(resourcePath) {
  return invoke("plugin:path|resolve_directory", {
    directory: BaseDirectory.Resource,
    path: resourcePath
  });
}
async function runtimeDir() {
  return invoke("plugin:path|resolve_directory", {
    directory: BaseDirectory.Runtime
  });
}
async function templateDir() {
  return invoke("plugin:path|resolve_directory", {
    directory: BaseDirectory.Template
  });
}
async function videoDir() {
  return invoke("plugin:path|resolve_directory", {
    directory: BaseDirectory.Video
  });
}
async function appLogDir() {
  return invoke("plugin:path|resolve_directory", {
    directory: BaseDirectory.AppLog
  });
}
async function tempDir() {
  return invoke("plugin:path|resolve_directory", {
    directory: BaseDirectory.Temp
  });
}
function sep() {
  return window.__TAURI_INTERNALS__.plugins.path.sep;
}
function delimiter() {
  return window.__TAURI_INTERNALS__.plugins.path.delimiter;
}
async function resolve(...paths) {
  return invoke("plugin:path|resolve", { paths });
}
async function normalize(path) {
  return invoke("plugin:path|normalize", { path });
}
async function join(...paths) {
  return invoke("plugin:path|join", { paths });
}
async function dirname(path) {
  return invoke("plugin:path|dirname", { path });
}
async function extname(path) {
  return invoke("plugin:path|extname", { path });
}
async function basename(path, ext) {
  return invoke("plugin:path|basename", { path, ext });
}
async function isAbsolute(path) {
  return invoke("plugin:path|is_absolute", { path });
}

// node_modules/@tauri-apps/api/tray.js
var tray_exports = {};
__export(tray_exports, {
  TrayIcon: () => TrayIcon
});
var TrayIcon = class _TrayIcon extends Resource {
  constructor(rid, id) {
    super(rid);
    this.id = id;
  }
  /** Gets a tray icon using the provided id. */
  static async getById(id) {
    return invoke("plugin:tray|get_by_id", { id }).then((rid) => rid ? new _TrayIcon(rid, id) : null);
  }
  /**
   * Removes a tray icon using the provided id from tauri's internal state.
   *
   * Note that this may cause the tray icon to disappear
   * if it wasn't cloned somewhere else or referenced by JS.
   */
  static async removeById(id) {
    return invoke("plugin:tray|remove_by_id", { id });
  }
  /**
   * Creates a new {@linkcode TrayIcon}
   *
   * #### Platform-specific:
   *
   * - **Linux:** Sometimes the icon won't be visible unless a menu is set.
   * Setting an empty {@linkcode Menu} is enough.
   */
  static async new(options) {
    if (options === null || options === void 0 ? void 0 : options.menu) {
      options.menu = [options.menu.rid, options.menu.kind];
    }
    if (options === null || options === void 0 ? void 0 : options.icon) {
      options.icon = transformImage(options.icon);
    }
    const handler = new Channel();
    if (options === null || options === void 0 ? void 0 : options.action) {
      const action = options.action;
      handler.onmessage = (e) => action(mapEvent(e));
      delete options.action;
    }
    return invoke("plugin:tray|new", {
      options: options !== null && options !== void 0 ? options : {},
      handler
    }).then(([rid, id]) => new _TrayIcon(rid, id));
  }
  /**
   *  Sets a new tray icon. If `null` is provided, it will remove the icon.
   *
   * Note that you may need the `image-ico` or `image-png` Cargo features to use this API.
   * To enable it, change your Cargo.toml file:
   * ```toml
   * [dependencies]
   * tauri = { version = "...", features = ["...", "image-png"] }
   * ```
   */
  async setIcon(icon) {
    let trayIcon = null;
    if (icon) {
      trayIcon = transformImage(icon);
    }
    return invoke("plugin:tray|set_icon", { rid: this.rid, icon: trayIcon });
  }
  /**
   * Sets a new tray menu.
   *
   * #### Platform-specific:
   *
   * - **Linux**: once a menu is set it cannot be removed so `null` has no effect
   */
  async setMenu(menu) {
    if (menu) {
      menu = [menu.rid, menu.kind];
    }
    return invoke("plugin:tray|set_menu", { rid: this.rid, menu });
  }
  /**
   * Sets the tooltip for this tray icon.
   *
   * #### Platform-specific:
   *
   * - **Linux:** Unsupported
   */
  async setTooltip(tooltip) {
    return invoke("plugin:tray|set_tooltip", { rid: this.rid, tooltip });
  }
  /**
   * Sets the tooltip for this tray icon.
   *
   * #### Platform-specific:
   *
   * - **Linux:** The title will not be shown unless there is an icon
   * as well.  The title is useful for numerical and other frequently
   * updated information.  In general, it shouldn't be shown unless a
   * user requests it as it can take up a significant amount of space
   * on the user's panel.  This may not be shown in all visualizations.
   * - **Windows:** Unsupported
   */
  async setTitle(title) {
    return invoke("plugin:tray|set_title", { rid: this.rid, title });
  }
  /** Show or hide this tray icon. */
  async setVisible(visible) {
    return invoke("plugin:tray|set_visible", { rid: this.rid, visible });
  }
  /**
   * Sets the tray icon temp dir path. **Linux only**.
   *
   * On Linux, we need to write the icon to the disk and usually it will
   * be `$XDG_RUNTIME_DIR/tray-icon` or `$TEMP/tray-icon`.
   */
  async setTempDirPath(path) {
    return invoke("plugin:tray|set_temp_dir_path", { rid: this.rid, path });
  }
  /** Sets the current icon as a [template](https://developer.apple.com/documentation/appkit/nsimage/1520017-template?language=objc). **macOS only** */
  async setIconAsTemplate(asTemplate) {
    return invoke("plugin:tray|set_icon_as_template", {
      rid: this.rid,
      asTemplate
    });
  }
  /**
   *  Disable or enable showing the tray menu on left click.
   *
   * #### Platform-specific:
   *
   * - **Linux**: Unsupported.
   *
   * @deprecated use {@linkcode TrayIcon.setShowMenuOnLeftClick} instead.
   */
  async setMenuOnLeftClick(onLeft) {
    return invoke("plugin:tray|set_show_menu_on_left_click", {
      rid: this.rid,
      onLeft
    });
  }
  /**
   *  Disable or enable showing the tray menu on left click.
   *
   * #### Platform-specific:
   *
   * - **Linux**: Unsupported.
   *
   * @since 2.2.0
   */
  async setShowMenuOnLeftClick(onLeft) {
    return invoke("plugin:tray|set_show_menu_on_left_click", {
      rid: this.rid,
      onLeft
    });
  }
};
function mapEvent(e) {
  const out = e;
  out.position = new PhysicalPosition(e.position);
  out.rect.position = new PhysicalPosition(e.rect.position);
  out.rect.size = new PhysicalSize(e.rect.size);
  return out;
}
export {
  app_exports as app,
  core_exports as core,
  dpi_exports as dpi,
  event_exports as event,
  image_exports as image,
  menu_exports as menu,
  mocks_exports as mocks,
  path_exports as path,
  tray_exports as tray,
  webview_exports as webview,
  webviewWindow_exports as webviewWindow,
  window_exports as window
};
//# sourceMappingURL=@tauri-apps_api.js.map
